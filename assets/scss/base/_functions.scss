@use "sass:math";

// via https://css-tricks.com/snippets/sass/px-to-em-functions/
$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return math.div($pixels, $context) * 1em;
}

@function rem($pixels) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  $context: $browser-context;

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return math.div($pixels, $context) * 1rem;
}

/**
 * Easing Linear gradients
 *
 * via https://codepen.io/jmkII/pen/pParwj
 */
$scrimStops: 0% 0%, 26.2% 19%, 45.9% 34%, 61.8% 47%, 72.2% 56.5%, 80.6% 65%, 87.4% 73%, 92.5% 80.2%, 95.8% 86.1%, 97.9% 91%, 99.2% 95.2%, 99.8% 98.2%, 100% 100%;

@function getColorStop($colorTo, $colorFrom, $weight, $stop) {
  @return mix($colorFrom, $colorTo, $weight) $stop;
}

@function getColorStops($colorTo, $colorFrom) {
  $stops: ();

  @each $scrimStop in $scrimStops {
    $stops: append($stops, getColorStop($colorTo, $colorFrom, nth($scrimStop, 1), nth($scrimStop, 2)), comma)
  }

  @return $stops;
}

@function scrim-linear-gradient($args...) {
  @if (length($args)==2) {
    @return linear-gradient(#{getColorStops(nth($args, 1), nth($args, 2))});
  }

  @return linear-gradient(#{nth($args, 1)}, #{getColorStops(nth($args, 2), nth($args, 3))});
}

/// Mixin to place items on a circle
/// @author Kitty Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-circle($item-count, $circle-size, $item-size) {
  position: relative;
  width: 100%;
  height: 100%;
  padding: 0;
  border-radius: 50%;
  list-style: none;

  >* {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    margin: -(math.div($item-size, 2));

    $angle: math.div(360, $item-count );
    $rot: 0;
    $half-circle-size: math.div($circle-size, 2);

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform:
          rotate($rot * 1deg) translate($half-circle-size - math.div($item-size, 2)) rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}

/// Mixin to add spokes to a circle
/// @author Kitty Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
@mixin on-spoke($item-count, $circle-size, $item-size) {
  $angle: math.div(360, $item-count );
  $rot: 0;
  $half-circle-size: math.div($circle-size, 2);

  position: relative;
  width: 100%;
  height: 100%;
  padding: 0;
  border-radius: 50%;
  list-style: none;

  >* {
    display: block;
    position: absolute;
    top: 50%;
    left: 13.5%;
    width: 50%;

    $translate: math.div($circle-size, 4)+math.div($item-size, 2) * -1;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform:
          rotate($rot * 1deg) translate($translate);
      }

      $rot: $rot + $angle;
    }
  }
}
