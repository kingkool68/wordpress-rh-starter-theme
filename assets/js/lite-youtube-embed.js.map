{
  "version": 3,
  "sources": ["lite-youtube-embed.src.js"],
  "sourcesContent": ["/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n * See https://github.com/paulirish/lite-youtube-embed\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (\uD83D\uDC4D\uD83D\uDC4D)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\n class LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute('videoid');\n\n        let playBtnEl = this.querySelector('.lty-playbtn');\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\n\n        /**\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         *\n         * TODO: Do the sddefault->hqdefault fallback\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\n         * TODO: Consider using webp if supported, falling back to jpg\n         */\n        if (!this.style.backgroundImage) {\n          this.posterUrl = `https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg`;\n          // Warm the connection for the poster image\n          LiteYTEmbed.addPrefetch('preload', this.posterUrl, 'image');\n\n          this.style.backgroundImage = `url(\"${this.posterUrl}\")`;\n        }\n\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement('button');\n            playBtnEl.type = 'button';\n            playBtnEl.classList.add('lty-playbtn');\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement('span');\n            playBtnLabelEl.className = 'lyt-visually-hidden';\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        // this.addEventListener('click', e => this.addIframe());\n        this.addEventListener('click', function(e) {\n            e.preventDefault();\n            this.addIframe();\n        });\n    }\n\n    // // TODO: Support the the user changing the [videoid] attribute\n    // attributeChangedCallback() {\n    // }\n\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */\n    static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement('link');\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) {\n            linkEl.as = as;\n        }\n        document.head.append(linkEl);\n    }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n\n        LiteYTEmbed.preconnected = true;\n    }\n\n    addIframe() {\n        const params = new URLSearchParams(this.getAttribute('params') || []);\n        params.append('autoplay', '1');\n\n        const iframeEl = document.createElement('iframe');\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\n        this.append(iframeEl);\n\n        this.classList.add('lyt-activated');\n\n        // Set focus for a11y\n        this.querySelector('iframe').focus();\n    }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n"],
  "mappings": "MAaC,IAAMA,EAAN,MAAMC,UAAoB,WAAY,CACnC,mBAAoB,CAChB,KAAK,QAAU,KAAK,aAAa,SAAS,EAE1C,IAAIC,EAAY,KAAK,cAAc,cAAc,EA4BjD,GA1BA,KAAK,UAAaA,GAAaA,EAAU,YAAY,KAAK,GAAM,KAAK,aAAa,WAAW,GAAK,OAW7F,KAAK,MAAM,kBACd,KAAK,UAAY,0BAA0B,KAAK,OAAO,iBAEvDD,EAAY,YAAY,UAAW,KAAK,UAAW,OAAO,EAE1D,KAAK,MAAM,gBAAkB,QAAQ,KAAK,SAAS,MAIhDC,IACDA,EAAY,SAAS,cAAc,QAAQ,EAC3CA,EAAU,KAAO,SACjBA,EAAU,UAAU,IAAI,aAAa,EACrC,KAAK,OAAOA,CAAS,GAErB,CAACA,EAAU,YAAa,CACxB,IAAMC,EAAiB,SAAS,cAAc,MAAM,EACpDA,EAAe,UAAY,sBAC3BA,EAAe,YAAc,KAAK,UAClCD,EAAU,OAAOC,CAAc,CACnC,CAGA,KAAK,iBAAiB,cAAeF,EAAY,gBAAiB,CAAC,KAAM,EAAI,CAAC,EAM9E,KAAK,iBAAiB,QAAS,SAAS,EAAG,CACvC,EAAE,eAAe,EACjB,KAAK,UAAU,CACnB,CAAC,CACL,CASA,OAAO,YAAYG,EAAMC,EAAKC,EAAI,CAC9B,IAAMC,EAAS,SAAS,cAAc,MAAM,EAC5CA,EAAO,IAAMH,EACbG,EAAO,KAAOF,EACVC,IACAC,EAAO,GAAKD,GAEhB,SAAS,KAAK,OAAOC,CAAM,CAC/B,CAWA,OAAO,iBAAkB,CACjBN,EAAY,eAGhBA,EAAY,YAAY,aAAc,kCAAkC,EAExEA,EAAY,YAAY,aAAc,wBAAwB,EAG9DA,EAAY,YAAY,aAAc,qCAAqC,EAC3EA,EAAY,YAAY,aAAc,gCAAgC,EAEtEA,EAAY,aAAe,GAC/B,CAEA,WAAY,CACR,IAAMO,EAAS,IAAI,gBAAgB,KAAK,aAAa,QAAQ,GAAK,CAAC,CAAC,EACpEA,EAAO,OAAO,WAAY,GAAG,EAE7B,IAAMC,EAAW,SAAS,cAAc,QAAQ,EAChDA,EAAS,MAAQ,IACjBA,EAAS,OAAS,IAElBA,EAAS,MAAQ,KAAK,UACtBA,EAAS,MAAQ,0EACjBA,EAAS,gBAAkB,GAG3BA,EAAS,IAAM,0CAA0C,mBAAmB,KAAK,OAAO,CAAC,IAAID,EAAO,SAAS,CAAC,GAC9G,KAAK,OAAOC,CAAQ,EAEpB,KAAK,UAAU,IAAI,eAAe,EAGlC,KAAK,cAAc,QAAQ,EAAE,MAAM,CACvC,CACJ,EAEA,eAAe,OAAO,eAAgBT,CAAW",
  "names": ["LiteYTEmbed", "_LiteYTEmbed", "playBtnEl", "playBtnLabelEl", "kind", "url", "as", "linkEl", "params", "iframeEl"]
}
